The idea behind entmesh: To allow entropy to move from where it's abundant to
where it's needed within a network of computers.

Terms:
* HRNG: Hardware Random Number Generator. Used somewhat interchangeably with
  TRNG in this document.
* TRNG: True Random Number Generator. Used somewhat interchangeably with HRNG
  in this document.

Node:

The base logical device in the network.

Tank:

A Node where entropy is stored.

(notes)
Examples of Tanks include the Linux kernel's entropy pool, as well as userland
buffers.

Source:

A Node where entropy is generated.

Sources which cannot receive entropy (such as HRNGs) are abstracted as Tanks
which are always full.

(notes)
Common examples of Sources include the Linux kernel's entropy pool, HRNGs and
software sources.

Message:

A packet of information sent by one Node and received by another Node.

Connection:

A bidirectional data path between two Nodes.

Connections are initialized, utilized and terminated, in that order.

Messages sent over a Connection MUST arrive in the order they are sent.

When a Message is sent over a Connection, it MUST NOT arrive more than once.

All explicit messages pass over Connections.

There MUST NOT be more than one Connection directly between any two Nodes.

Peer:

The Node on the other side of a Connection.

Fill Level:

The Fill Level of a Tank represents a quantity of entropy in the tank in
proportion to the Tank's capacity.

Fill Level Notification:

A Fill Level Notification is a Message sent from one Tank (the sender) to
another (the receiver), declaring to the receiver the sender's Fill Level.

When a Tank's Fill Level changes, it MAY inform any Peer with which it has a
connection.

When a Tank establishes a Connection with a Peer, it MUST send a Fill Level
Notification.

How a Fill Level Notification is sent between Nodes is an implementation
detail of the Connection between Nodes.

The Fill Level communicated by Fill Level Notifications must, at minimum, be
able to represent 'full' and 'empty' states.

A Node SHOULD NOT transmit the same Fill Level consecutively via Fill Level
Notifications on the same Connection.

(notes)

If there is no desire to receive entropy from a Peer, a valid tactic to avoid
this would be to indicate a 'full' state on the Connection's mandatory initial
Fill Level Notification--and never send another Fill Level Notification
communicating otherwise.

There are a variety of reasons for a Tank to not send Fill Level Notifications
to its Peer. Among them are:

* The erstwhile sender may not be capable of receiving entropy, and so any
  entropy sent to it would be a waste. This would be the case of both HRNGs
  and of Nodes whose purpose is purely to monitor the statuses of other Nodes.
* The erstwhile sender may not trust the Peer as a valid source of entropy,
  and so it does not desire entropy from that Peer--and would discard said
  entropy if received.
* The Peer relationship may be part of a larger network of Nodes, where
  one-way entropy flow is desireable in this part of the network. This might
  be the case if there is an asymmetric network connection (such as an ADSL
  link) between two nodes, and it is more expensive for one node to push data
  upstream than for the other to push data downstream.

Ways of describing Fill Levels could include:
* Percentages ( 23% )
* Fractions  ( 123 / 456789 )
* Discrete, relateable enumerated states ( GOOD > OK > LOW > CRITICAL )

"Relateable" in "relateable enumerated states" simply means that you have a
stable means of determining equality and whether one is greater than the
other. I.e. "GOOD" is the same as "GOOD", but "GOOD" is greater than
"CRITICAL".

Entropy Transfer Requests:

When two Tanks with an established Connection between them have their Fill
Level differ by a Signifanct degree, and there is sufficient communication via
Fill Level Notifications, an Entropy Transfer Request results.

For two Connected Nodes, A and B, with each other as Peers:

* If Node A's Fill Level is the same as Node B's Fill Level, then there is no
  Entropy Transfer Request.
* If Node A's Fill Level is Significantly higher than Node B's Fill Level,
  then there is an Entropy Transfer Request seeking the two to be normalized.
* If Node B's Fill Level is Significantly higher than Node A's Fill Level,
  then there is an Entropy Transfer Request seeking the two to be normalized.

Entropy Transfer Requests are virtual in nature, meaning they are not sent
explicitly.

Entropy Transfer Requests are detected by the Node receiving a Fill Level
Notification.

Entropy Transfer Requests are detected by comparing the Fill Level indicated
in the received Fill Level Notification with the Fill Level of the receiving
Tank.

Entropy Transfer Requests are considered to accompany Fill Level
Notifications.

Entropy Transfer Requests are considered as having been sent by the Node
which sent the triggering Fill Level Notification.

Entropy Transfer Requests can only be terminated by the detecting Node's
determining that the two Node's Fill Levels are no longer Significantly
different.

(notes)

It is possible for Node A to 'send' an Entropy Transfer Request to Node B
without knowing that Node B's Fill Level is Significantly greater than it's
own, since there may be a delay in communications where Node A and Node B each
have Fill Level Notifications in transit to each other. This results in a
systemic race condition, and means that the sender of a Fill Level
Notification cannot assume it will trigger an Entropy Transfer or Entropy
Transfer Request; the receiver (Node B) of the Fill Level Notification (FLN
A->B) may have been fully drained of entropy before the receiver's (Node B's)
own Fill Level Notification (FLN B->A) reached the sender (Node A).

Entropy Message:

A volume of Entropy sent across a Connection.

Entropy Transfers:

When an Entropy Transfer occurs, one Tank sends entropy from itself across its
Connection to another Tank.

A Node which receives an Entropy Transfer Request SHOULD initiate an Entropy
Transfer in response.

The sending Tank MUST remove that entropy from itself.

The sending Tank SHOULD continue sending entropy until there is no longer an
outstanding Entropy Transfer Request.

The sending Tank MUST NOT send the same entropy more than once to the same
Node.

The sending Tank MUST NOT send the same entropy to more than one
Node.

The receiving Tank SHOULD add that entropy to itself unless it is full.

(Notes)

If a Tank sends Fill Level Notifications to a Peer, but does not add entropy
received from resulting Entropy Transfer Requests, it risks triggering a
perpetual drain on the sending Tank's Fill Level as well as an undesirable
drain on resources consumed in generating and communicating the discarded
entropy. It is for this reason that a receiving Tank SHOULD add such entropy
to itself. If a Tank wishes not to be the recipient of Entropy Transfers, it
still has the option not to send Fill Level Notifications. This would be an
appropriate configuration for a Tank-abstracted HRNG, for example. 

Examples:

K = Kernel entropy pool, abstracted as a Tank Node.
M = Memory FIFO entropy buffer, abstracted as a Tank Node.

Single-host, no external entropy source:
K<->M
* K Trusts M
* M Trusts K

In this example, some internal abstraction driver describes the kernel entropy
pool as a Tank, monitors its level, handles Fill Level announcements and
Entropy Transfers. Since the kernel entropy pool only stores a very, very
small amount of entropy (512 bytes), having a separate M Tank can be
beneficial; it allows us to save off any excess entropy generated or received
that wouldn't otherwise have fit in K. When K runs low, entropy is moved from
M back into K.

Two hosts, equally trusted:

K1 <-> M1 <-> M2 <-> K2

* K1 and M1 are on the same host
* K1 and M1 trust each other.
* K2 and M2 are on the same host
* K2 and M2 trust each other.
* M1 and M2 trust each other.

In this example, the Linux kernel for host 1 will attempt to fill K1, and the
kernel for host 2 will likewise fill K2. K1 and M1 will attempt to keep each
other filled, K2 and M2 will attempt to keep each other filled, and M1 and M2
will attempt to keep each other filled.

So, if K2 runs dry, draining M2, then M1 will feed into M2, which will feed
into K2. If M1 runs dry, K1 will attempt to fill it.

Likewise, if K1 runs dry, draining M1, then M2 will feed into M1, and K2 will
feed into M2.

In this way, entropy will flow from where it's available to where it's needed.

Two hosts, unequal trust:
Let's say that in the situation above, host 1 does not trust the quality of
entropy from host 2, but does want to keep host 2 supplied with entropy.
(Perhaps host 1 has an HRNG tied into K1)

K1 <-> M1 -> M2 <-> K2

If M1 sends K1 a Fill Level announcement, and K1 sees that M1 has a lower Fill
Level than K1 has, K1 will initiate an Entropy Transfer to try to fill M1.

Client/Server entropy cluster:

K1 <-> M1 <--v
K2 <-> M2 <->M3-,
                +------->M4<->K4
                +------->M5<->K5
                +------->M6<->K6
                +------->M7<->K7
                 \------>M8<->K8

Here, you have two hosts, 1 and 2, sharing trust with buffer M3. M4-M8 aren't
trusted by anyone but their hosts' kernels, and it's M3's job to keep them
supplied with entropy.

(This is how I see entmesh being useful in VM cluster environments.)

